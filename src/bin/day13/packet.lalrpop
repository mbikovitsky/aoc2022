use std::str::FromStr;

use crate::packet::{Packet, PacketElement};

grammar;

pub Packet: Packet = {
    <l:EnclosedList> => Packet::new(l),
};

PacketElement: PacketElement = {
    <n:Num> => PacketElement::Int(n),
    <l:EnclosedList> => PacketElement::List(l),
};

Num: u32 = r"[0-9]+" => u32::from_str(<>).unwrap();

EnclosedList: Vec<PacketElement> = {
    "[]" => vec![],
    "[" <l:List> "]" => l,
};

List: Vec<PacketElement> = {
    <car:PacketElement> => vec![car],
    <car:PacketElement> "," <cdr:List> => {
        let mut result = vec![car];
        let mut cdr = cdr;
        result.append(&mut cdr);
        result
    },
};
